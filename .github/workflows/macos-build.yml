# .github/workflows/macos-build.yml
name: macOS Build & Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.dart'
      - 'pubspec.yaml'
      - '.github/workflows/macos-build.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

jobs:
  macos-build:
    name: 🍎 Build & Test on macOS
    runs-on: macos-latest
    
    strategy:
      matrix:
        # Test on different macOS versions if needed
        os-version: [macos-latest] # Can add macos-12, macos-13
        dart-version: ['3.7.0', 'stable']
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🍎 Setup macOS environment
        run: |
          echo "🍎 macOS Environment Info:"
          sw_vers
          echo "Architecture: $(uname -m)"
          echo "Available disk space:"
          df -h

      - name: 🎯 Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart-version }}

      - name: 🔍 Dart environment info
        run: |
          dart --version
          dart pub --version
          echo "Dart SDK path: $(which dart)"

      - name: 📦 Get dependencies
        run: |
          echo "📦 Installing dependencies..."
          flutter pub get
          echo "✅ Dependencies installed"

      - name: 🔍 Analyze code
        run: |
          echo "🔍 Running dart analyze..."
          dart analyze --fatal-infos

      - name: 🧪 Run tests
        run: |
          echo "🧪 Running tests..."
          dart test --platform vm --reporter expanded

      - name: 🏗️ Build macOS executable
        run: |
          echo "🏗️ Building macOS executable..."
          
          # Create build directory
          mkdir -p build
          
          # Build for macOS
          dart compile exe main.dart -o build/zip_extractor_macos
          
          echo "✅ Build completed"

      - name: 🔧 Set executable permissions
        run: |
          chmod +x build/zip_extractor_macos
          echo "✅ Executable permissions set"

      - name: 🧪 Test executable
        run: |
          echo "🧪 Testing executable..."
          
          # Basic test - check if executable runs and shows help
          timeout 10s ./build/zip_extractor_macos --help || echo "Help command executed"
          
          # Check file info
          file build/zip_extractor_macos
          ls -la build/zip_extractor_macos
          
          echo "✅ Executable test completed"

      - name: 📊 Build information
        id: build_info
        run: |
          # Get file size
          SIZE_BYTES=$(stat -f%z build/zip_extractor_macos)
          SIZE_MB=$(echo "scale=2; $SIZE_BYTES / 1024 / 1024" | bc)
          
          # Get version from pubspec.yaml
          VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          
          echo "File size: ${SIZE_MB} MB"
          echo "Version: ${VERSION}"
          echo "Architecture: $(lipo -archs build/zip_extractor_macos 2>/dev/null || echo 'x86_64')"
          
          # Output for GitHub
          echo "size_mb=${SIZE_MB}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: 🔐 Code signing (if certificates available)
        if: github.event_name != 'pull_request'
        run: |
          # This step would handle code signing if you have certificates
          # For now, we'll just note that the binary is unsigned
          echo "⚠️ Binary is unsigned (no code signing certificates configured)"
          echo "For distribution, consider setting up code signing"

      - name: 📤 Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: zip-extractor-macos-${{ steps.build_info.outputs.version }}-${{ github.sha }}
          path: build/zip_extractor_macos
          retention-days: 30

      - name: 📝 Create build summary
        run: |
          echo "## 🍎 macOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | macOS ($(sw_vers -productVersion)) |" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | $(uname -m) |" >> $GITHUB_STEP_SUMMARY
          echo "| Dart Version | ${{ matrix.dart-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| App Version | ${{ steps.build_info.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| File Size | ${{ steps.build_info.outputs.size_mb }} MB |" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | zip_extractor_macos |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependencies installed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code analysis passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Executable built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Basic functionality verified" >> $GITHUB_STEP_SUMMARY

  # Optional: Universal binary build (if you want to support both Intel and Apple Silicon)
  universal-binary:
    name: 🍎 Build Universal Binary
    runs-on: macos-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🏗️ Build for Intel (x64)
        run: |
          echo "🏗️ Building for Intel (x64)..."
          dart compile exe main.dart -o build/zip_extractor_intel

      - name: 🏗️ Build for Apple Silicon (arm64)
        run: |
          echo "🏗️ Building for Apple Silicon (arm64)..."
          # Note: This requires Dart SDK with Apple Silicon support
          dart compile exe main.dart -o build/zip_extractor_arm64

      - name: 🔧 Create Universal Binary
        run: |
          echo "🔧 Creating Universal Binary..."
          
          # Create universal binary using lipo
          lipo -create -output build/zip_extractor_universal \
            build/zip_extractor_intel \
            build/zip_extractor_arm64
          
          chmod +x build/zip_extractor_universal
          
          # Verify universal binary
          lipo -info build/zip_extractor_universal
          
          echo "✅ Universal binary created"

      - name: 📤 Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: zip-extractor-macos-universal-${{ github.sha }}
          path: build/zip_extractor_universal
          retention-days: 30
